name: Deploy batch

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Set Environment'
        required: true
        default: dev
      branch:
        description: 'Set Branch'
        required: true
        default: main

env:
  SERVICE_NAME: service
  JAR_NAME: batch
  MODULE_NAME: service-batch
  DEPLOY_ENV: ${{ github.event.inputs.environment }}
  DIRECTORY: batch

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Set timezone
        run: export TZ="UTC"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: 'self'

      - name: Checkout argocd deploy repository
        uses: actions/checkout@v2
        with:
          repository: 'GreedTy/argocd-deploy'
          token: ${{ secrets.GITHUB_ACTOR }}
          path: 'argocd-deploy'
          fetch-depth: 0

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        working-directory: 'self'

      - name: Get current time
        uses: srfrnk/current-time@master
        id: current-time
        with:
          format: YYYYMMDDHHmmss

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash
        working-directory: 'self'

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      # Build
      - name: Build with Gradle
        env:
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          ./gradlew ktlintCheck
          ./gradlew clean test
          ./gradlew :${{ env.JAR_NAME }}:bootJar
        working-directory: 'self'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # Policy: AmazonEC2ContainerRegistryFullAccess
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.MODULE_NAME }}
          IMAGE_TAG: ${{ env.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}-${{ steps.current-time.outputs.formattedTime }}
          #DD_AGENT_VERSION: 0.93.0
        run: |
          #wget -O dd-java-agent.jar \
          #  https://repo1.maven.org/maven2/com/datadoghq/dd-java-agent/$DD_AGENT_VERSION/dd-java-agent-$DD_AGENT_VERSION.jar
          
          wget -O dd-java-agent.jar https://dtdg.co/latest-java-tracer

          # Build a docker container and push it to ECR
          docker build \
            --build-arg DEPLOY_ENV \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f Dockerfile .

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        working-directory: 'self/${{ env.DIRECTORY }}'

      - name: Change argocd-deploy branch
        run: git checkout main
        working-directory: 'argocd-deploy'

      - name: Templating Helm chart
        env:
          VERSION: ${{ steps.vars.outputs.sha_short }}-${{ steps.current-time.outputs.formattedTime }}
        run: helm template -f values-${{ env.DEPLOY_ENV }}.yaml .
          --set imageName=${{ steps.build-image.outputs.image }}
          --set deployEnv=${{ env.DEPLOY_ENV }}
          --set ddVersion=$VERSION
          > ../../../argocd-deploy/${{ env.SERVICE_NAME }}/${{ env.JAR_NAME }}/${{ env.DEPLOY_ENV }}/app.yaml
        working-directory: 'self/${{ env.DIRECTORY }}/deploy/helm'

      - name: Push to the argocd-deploy repository
        run: |
          git config --global user.email "iam@github.action"
          git config --global user.name "GitHubAction"
          git add .
          git commit -m "Patch manifests for ${{ env.SERVICE_NAME }}-${{ env.JAR_NAME }}. imageName: ${{ steps.build-image.outputs.image }}"
          git pull --rebase origin main
          git push -u origin main
        working-directory: 'argocd-deploy'
